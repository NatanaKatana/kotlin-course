package ru.stimmax.lessons.lesson10.homeworks

fun main() {


//Задачи на работу со словарём

//1. Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val ex1 = mapOf<Int, Int>()

//2. Создайте словарь, инициализированный несколькими парами "ключ-значение", где ключи - float, а значения - double
    val ex2 = mapOf<Float, Double>(2991300.55f to 56.25, 54646446.64f to 56.24)

//3. Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val ex3 = mutableMapOf<Int, String>()

//4. Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    ex3[1] = "Вася"
    ex3[2] = "Федот"

//5. Используя словарь из предыдущего задания, извлеките значение, используя ключ.
    val value = ex3[1] // здесь указываем ключ, например 1
    println("Задание 3.5: Значение по ключу 1 — $value")

//6. Попробуй получить значение с ключом, которого в словаре нет.
    // Пытаемся получить значение по несуществующему ключу
    val value2 = ex3[3]
    println("Значение по ключу 3: $value2")
    // Проверим через условие
    if (value2 == null) {
        println("Ключ 3 не найден в словаре")
    }

//7. Удалите определенный элемент из изменяемого словаря по его ключу.
    ex3.remove(2)

//8. Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления ключа на значение.
    val ex8 = mapOf<Double, Int>(25.25 to 1, 66.66 to 6, 55.55 to 0)
    for ((double, int) in ex8) {
        val division = double / int
        println("Результат деления $double / $int = $division")
        if (int == 0) {
            println("Бесконечность")
        }
    }

//9. Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)

    // см.выше в задание 7

//10. Измените значение для существующего ключа в изменяемом словаре.

    ex3[2] = "Достоевский"

//11. Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.

    val mapFirst11 = mapOf<String, String>("Россия" to "Москва", "Беларусь" to "Минск")
    val mapSecond11 = mapOf<String, String>("Млекопитающие" to "Кот", "Насекомые" to "Паук")
    val mapThird11 = mutableMapOf<String, String>()
    for ((country, capital) in mapFirst11) {
        mapThird11[country] = capital
    }
    for ((type, animal) in mapSecond11) {
        mapThird11[type] = animal
    }
    println("Объединённый словарь: $mapThird11")

//12. Создайте словарь, где ключами являются строки, а значениями - списки целых чисел.
    //Добавьте несколько элементов в этот словарь.

    val ex12 = mutableMapOf<String, MutableList<Int>>()
    ex12["Рост китайцев"] = mutableListOf(145, 151, 153)
    ex12["Рост монголов"] = mutableListOf(155, 156, 165)
    println("Без осуждений, это просто упражнение 12: $ex12")

//13. Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк. Добавь данные в словарь.

    val ex13 = mutableMapOf<Int, MutableSet<String>>()
    ex13[1] = mutableSetOf("Вася Пупкин", "Федот Кучерявый")
    ex13[2] = mutableSetOf("Маша Простокваша", "Ира Кефирова")
    println("Без осуждений, это просто упражнение 13: $ex13")

//14. Получи значение по ключу (это должно быть множество строк) и добавь в это множество ещё строку. Распечатай полученное множество.
    val ex14 = ex13[1]
    println("Задание 14: $ex14")
    ex14?.add("Иммануил Кант")
    println("Обновлённое множество для ключа 1: $ex14")

    // при желании можно вывести и весь словарь
    println("Теперь весь словарь выглядит так: $ex13")

//15. Создай словарь, где ключами будут пары чисел. Через перебор найди значение
    // у которого пара будет содержать цифру 5 в качестве первого или второго значения.


    val map15 =
        mapOf<Pair<Int, Int>, String>((1 to 2) to "what", (5 to 5) to "IDK", (5 to 9) to "What to do")

    // перебираем все элементы словаря
    for ((pair, value) in map15) {
        // проверяем, есть ли цифра 5 в первом или втором числе пары
        if (pair.first == 5 || pair.second == 5) {
            println("Пара ${pair.first} и ${pair.second} содержит 5 → значение: $value")
        }
    }


//Задачи на подбор оптимального типа для словаря

//15. Словарь библиотека: Ключи - автор книги, значения - список книг
val ex15 = mutableMapOf<String, MutableList<String>> ()

//16. Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"), значения - списки названий растений
val ex16 = mutableMapOf<String, List<String>>()

//17. Четвертьфинала: Ключи - названия спортивных команд, значения - списки игроков каждой команды
val ex17 = mutableMapOf<String, MutableList<String>> ()

//18. Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
val ex18 = mutableMapOf<String, MutableList<String>>()

//19. Словарь путешественника: Ключи - страны, значения - словари из городов со списком интересных мест.
val ex19 = mutableMapOf<String, MutableMap<String, MutableList<String>>>()

}
