package ru.stimmax.lessons.lesson14.homeworks

fun main() {
//1. Событие: вечеринка. Создайте класс Party, который описывает вечеринку.
// У него должны быть свойства location (String) и attendees (Int).
// Добавьте метод details(), который выводит информацию о месте проведения и количестве гостей.
    val party = Party("Ibiza, str.Jaga Jaga 69", 382)
    party.details()

//2. Аспект реальности: эмоция. Создайте класс Emotion, который представляет эмоцию.
// У него должно быть свойство type (String) и intensity (Int). Добавьте метод express(),
// который выводит описание эмоции в зависимости от её типа и интенсивности.

    val emotion = Emotion("sadness", 8)
    emotion.express()

//3. Природное явление: луна. Создайте объект Moon, который будет представлять Луну.
// Добавьте свойства isVisible (Boolean), чтобы отображать, видна ли Луна в данный момент,
// и phase (String), чтобы отображать текущую фазу Луны (например, "Full Moon", "New Moon").
// Добавьте метод showPhase(), который выводит текущую фазу Луны.

    Moon.showPhase()

//4. Покупка: продукт. Создайте дата класс для продукта, который будет представлять продукт в
// магазине. У него должны быть свойства “название”, “цена”, “количество”.
    val product = Product("Томат солнцу рад", 25.25, 896)
    println(product)

//5. Мероприятие: концерт. Создайте класс, который будет представлять концерт.
// У него должны быть свойства “группа”, “место проведения”, “стоимость”, “вместимость зала”.
// Также приватное поле “проданные билеты”. Добавьте метод, который выводит информацию о
// концерте и метод “купить билет”, который увеличивает количество проданных билетов на один.

    val concert = Concert("Второй Ка", "Белград, KC Grad", 25.25, 560, 55)
    concert.information()
    concert.buyTicket()

//Задание 6. Стеллаж и полки.
//Цель задания: Создать систему управления складским пространством с использованием классов "Стеллаж" и "Полка стеллажа".

//Класс Shelf (Полка Стеллажа)
//Характеристики:
//Вместимость полки (capacity): максимальная сумма букв всех названий предметов, которые могут быть размещены на полке.
//Список предметов (items): хранит названия предметов на полке.

val shelf = Shelf(564)

//Методы:
//Добавление Предмета (addItem):
//Принимает название предмета.
//Проверяет, поместится ли предмет на полку, учитывая длину его названия и текущее заполнение полки.
//Возвращает true и добавляет предмет, если есть место. В противном случае возвращает false.
shelf.addItem("Китайская ваза династии ЮХуньДжоу")

//Удаление Предмета (removeItem):
//Принимает название предмета.
//Удаляет предмет, если он найден на полке.
//Возвращает true, если предмет был удален, и false, если такой предмет не найден.
shelf.removeItem("Волшебная рука Фрвнкенштейна")

//Проверка Вместимости (canAccommodate):
//Принимает название предмета.
//Определяет, вместится ли предмет на полку.
//Возвращает true, если предмет вместится, и false, если места недостаточно.
shelf.canAccommodate("Ловец снов")

//Проверка наличия предмета (containsItem):
//Принимает название предмета
//Возвращает true если такой предмет есть
shelf.containsItem("Ядерный реактор")

//Получение списка предметов (getItems):
//Возвращает неизменяемый список предметов
shelf.getItems()


//Класс Rack (Стеллаж)
//Характеристики:
//Список полок (shelves): хранит полки стеллажа.
//Максимальное количество полок.

//Методы:

//Добавление Полки (addShelf):
//Добавляет новую полку в стеллаж.
//Возвращает true, если полка была успешно добавлена или false если стеллаж уже заполнен или была попытка добавить полку которая уже установлена.


//Удаление Полки (removeShelf):
//Принимает индекс полки для удаления.
//Удаляет полку по указанному индексу.
//Возвращает список предметов полки, если полка была успешно удалена или пустой список если полка не существует.

//Добавление Предмета (addItem):
//Добавляет предмет на первую свободную полку.
//Возвращает true, если предмет успешно добавлен, и false, если на всех полках недостаточно места.

//Удаление Предмета (removeItem):
//Находит и удаляет только один предмет с любой полки.
//Возвращает true, если предмет был удален, и false, если такой предмет не найден.

//Проверка наличия предмета на стеллаже (containsItem):
//Возвращает true если предмет есть на одной из полок

//Получение списка полок (getShelves):
//Возвращает неизменяемый список полок

//Печать Содержимого (printContents):
//Выводит в консоль информацию о каждой полке: индекс, вместимость, оставшуюся вместимость, список предметов. Информацию выводить в наглядном читаемом виде

//Сложное удаление полки (advancedRemoveShelf):
//Принимает индекс полки для удаления
//Перераспределяет предметы по имеющимся полкам, начиная с самых длинных. Если очередной предмет никуда не вмещается, его нужно пропустить и попробовать разместить следующий.
//Удаляет полку с оставшимися предметами
//Возвращает неизменяемый список предметов, которые не удалось удалить или пустой список если
// полки с таким индексом нет.

}


