package ru.stimmax.lessons.lesson13.homeworks

fun main() {


//Для решения каждой задачи постарайтесь использовать наиболее подходящий метод, не повторяясь с решением других задач.

//1. Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах.
// Определите среднее время выполнения теста.
    val a1 = mutableMapOf("name 1" to 25.25, "name 2" to 26.26)
    val a1average = a1.values.average()

//2. Имеется словарь с метаданными автоматизированных тестов, где ключи — это имена тестовых методов,
// а значения - строка с метаданными. Выведите список всех тестовых методов.
    val a2 = mutableMapOf(
        "имена тестовых методов 1" to "строка с метаданными 1",
        "имена тестовых методов 2" to "строка с метаданными 2"
    )
    val a2list: List<String> = a2.map { it.key }

//3. В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    a2["Новый тест"] = "результат"

//4. Посчитайте количество успешных тестов в словаре с результатами (ключ - название, значение - результат из passed, failed, skipped).
    val a4 = mutableMapOf(
        "название 1" to "passed",
        "название 2" to "failed",
        "название 3" to "skipped",
        "название 4" to "passed"
    )
    val a4result = a4.values.count { it == "passed" }

//5. Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен (ключ - название, значение - статус исправления).
    a4.remove("название 2")

//6. Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
// выведите сообщение о странице и статусе её проверки.
    val a6 = mutableMapOf("URL страницы 1" to "статус ответа 1", "URL страницы 2" to "статус ответа 2")
    for ((url, status) in a6) {
        println("Key: $url, value: $status")
    }

//7. Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.
    val a7 = mutableMapOf("название 1" to 25.25, "название 2" to 56.56, "название 3" to 88.88)
    val minTime = 25.25
    val a7result = a7.filter { it.value > minTime }

//8. В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в виде строки).
// Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.
    val a8 = mutableMapOf("/users" to "что-то там", "/posts" to "что-то там еще")
    val a8res = a8.getOrDefault("/users", "не был протестирован")

//9. Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации, значение - сама конфигурация),
// получите значение для "browserType". Ответ не может быть null.
    val a9 = mutableMapOf(
        "название параметра конфигурации 1" to "сама конфигурация 1",
        "название параметра конфигурации 2" to "сама конфигурация 2",
        "browserType" to "Abrakadabra"
    )
    val a9res = a9.getValue("browserType")

//10. Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, добавив новую версию.
    val a10map = mapOf("Version 1.0" to "Value 1", "Version 2.0" to "Value 2")
    val a10new = a10map + ("Version 2.1" to "BlaBlaBla")

//11. Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства,
// значение - строка с настройками), получите настройки для конкретной модели или верните настройки по умолчанию.
    val a11 = mutableMapOf("Nokia 3310" to "Settings 1", "NokiaN72" to "Settings 2")
    val basicSettings = "BAZA"
    val a11res = a11.getOrElse("Nokia 3310") { basicSettings }

//12. Проверьте, содержит ли словарь с ошибками тестирования (ключ - код ошибки, значение - описание ошибки) определенный код ошибки.
    val a12 = mutableMapOf("00Z84" to "OSIBKA", "00583KL" to "DYRA4OK KUPI SEBE ZNA4OK")
    val codeToCheck = "00Z84"
    val a12res = a12.containsKey(codeToCheck)
    if (a12res) {
        println("Код ошибки $codeToCheck найден: ${a12[codeToCheck]}")
    } else {
        println("Код ошибки $codeToCheck не найден.")
    }
}

//13. Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
// а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped"). Отфильтруйте словарь, оставив только те сценарии,
// идентификаторы которых соответствуют определённой версии тестов, то-есть в ключе содержится требуемая версия.
val a13 = mapOf("TestID_Version 1" to "Passed", "TestID_Version 2" to "Failed", "TestID_Version 3" to "Skipped")
val a13res = a13.filterKeys { it.contains("TestID_Version 2") }

//14. У вас есть словарь, где ключи — это названия функциональных модулей приложения, а значения — результаты их тестирования.
// Проверьте, есть ли модули с неудачным тестированием.
val a14 =
    mutableMapOf<String, String>("AuthModule" to "Passed", "PaymentModule" to "Passed", "CatalogModule" to "Failed")
val a14res = a14.containsValue("Failed")

//15. Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
val a15 = mutableMapOf("" to "")
val a15new = a15.putAll(a14)

//16. Объедините два неизменяемых словаря с данными о багах.
val map16firs = mapOf("" to "", "" to "")
val map16second = mapOf("" to "")
val newMap16 = map16firs + map16second

//17. Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.

val a17old = mutableMapOf("" to "")
val a17new = a17old.clear()

//18. Исключите из отчета по автоматизированному тестированию те случаи, где тесты были пропущены (имеют статус “skipped”).
// Ключи - название теста, значения - статус.
val a18 = mutableMapOf("название теста 1" to "skipped", "название теста 2" to "Passed", "название теста 3" to "Passed")
val a18res = a18.filterNot { it.value == "skipped" }

//19. Создайте копию словаря с конфигурациями тестирования удалив из него несколько конфигураций.
val a19 = a18 - listOf("название теста 1", "название теста 2")

//20. Создайте отчет о тестировании, преобразовав словарь с результатами тестирования
// (ключ — идентификатор теста, значение — результат) в список строк формата "Test ID: результат".
val report = a18.map { (testId, result) -> "$testId: $result" }

//21. Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.
val a21 = a18.toMap()

//22. Преобразуйте словарь, содержащий числовой ID теста и данные о времени выполнения тестов, заменив идентификаторы
// тестов на их строковый аналог (например через toString()).
val testTimes = mapOf(
    101 to 25.5,
    102 to 30.0,
    103 to 18.75
)

// Преобразуем числовые ключи в строки
val stringKeyTests = testTimes.mapKeys { it.key.toString() }

//23. Для словаря с оценками производительности различных версий приложения (ключи - строковая версия,
// значения - дробное число времени ответа сервера) увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.
val performance = mapOf(
    "v1.0" to 1.5,
    "v1.1" to 2.0,
    "v2.0" to 2.5
)

// Увеличиваем каждое значение на 10%
val updatedPerformance = performance.mapValues { it.value * 1.1 }

//24. Проверьте, пуст ли словарь с ошибками компиляции тестов.
val a24 = a18.isEmpty()

//25. Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.
val a25 = a18.isNotEmpty()

//26. Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.
val a26 = a18.all { it.value == "успешно"}

//27. Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.
val hasError = a18.any { it.value == "Error" }

//28. Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты, которые
// не прошли успешно и содержат в названии “optional”.
val filteredTests = a18.filter {
    it.value != "Passed" && it.key.contains("optional")
}



//Методы и поля, которые помогут решить задачи
//
//entries
//+1values
//keys
//forEach
//+11getOrElse
//+9getValue
//+8getOrDefault
//+12containsKey
//+14containsValue
//+2map
//+mapKeys
//mapValues
//+24isEmpty
//+25isNotEmpty
//+26all
//+27any
//+7filter
//+13filterKeys
//filterValues
//filterNot
//+4count
//+19minus
//+10plus
//put
//+15putAll
//+5remove
//+17clear
//+21toMap
//toMutableMap
//

//Создание копии с удалением списка ключей можно сделать с помощью оператора "-" и передачей списка ключей через listOf()

