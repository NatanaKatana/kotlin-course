package ru.stimmax.lessons.lesson08.homeworks

fun main() {

    exampleNotSure("Я не уверен в успехе этого проекта")
    catastrophe("Произошла катастрофа на сервере")
    noProblem("Этот код работает без проблем")
    word("Удача")

    extraction("Пользователь вошел в систему -> 2021-12-01 09:48:23")
    disguise("4539 1488 0343 6467")
    mail("username@example.com")
    nameOftheWay("D:/good.themes/dracula.theme")
    abbreviatura("Котлин лучший язык программирования")

//1. Преобразование строк

//Создайте функцию, которая будет анализировать входящие фразы и применять к ним различные преобразования,
// делая текст более ироничным или забавным. Функция должна уметь распознавать ключевые слова или условия
// и соответственно изменять фразу.

//Правила проверки и преобразования:

//Если фраза содержит слово "невозможно":
//Преобразование: Замените "невозможно" на "совершенно точно возможно, просто требует времени".
    val unreal = "Это невозможно выполнить за один день"
    val unrealReplace = unreal.replace("невозможно", "совершенно точно возможно, просто требует времени")
    println(unrealReplace)

}

//Если фраза начинается с "Я не уверен":
//Преобразование: Добавьте в конец фразы ", но моя интуиция говорит об обратном".
fun exampleNotSure(arg: String) {
    val notSureResult = when {
        arg.startsWith("Я не уверен") -> "$arg , но моя интуиция говорит об обратном"
        else -> arg
    }
    println(notSureResult)
}


//Если фраза содержит слово "катастрофа":
//Преобразование: Замените "катастрофа" на "интересное событие".
fun catastrophe(arg: String) {
    val catastropheReplace = arg.replace("катастрофа", "интересное событие")
    println(catastropheReplace)
}

//Если фраза заканчивается на "без проблем":
//Преобразование: Замените "без проблем" на "с парой интересных вызовов на пути".
//"Этот код работает без проблем"
fun noProblem(arg: String) {
    val noProblemReplace = when {
        arg.endsWith("без проблем") -> arg.replace("без проблем", "с парой интересных вызовов на пути")
        else -> arg
    }
    println(noProblemReplace)
}

//Если фраза содержит только одно слово:
//Преобразование: Добавьте перед словом "Иногда," и после слова ", но не всегда".
//"Удача"
fun word(arg: String) {
    val wordResult = when {
        arg.length <= 5 -> "Иногда, $arg, но не всегда"
        else -> arg
    }
    println(wordResult)
}


//2. Извлечение даты из строки лога
//У вас есть строка лога, например "Пользователь вошел в систему -> 2021-12-01 09:48:23"
// (данные могут быть любыми, но формат всегда такой). Извлеките отдельно дату и время из этой
// строки и сразу распечатай их по очереди. Используй indexOf или split для получения правой части сообщения.
fun extraction(arg: String) {
    val rightPart = arg.split("->")[1].trim()
    val parts = rightPart.split(" ")
    val date = parts[0]
    val time = parts[1]
    println(date) // 2021-12-01
    println(time) // 09:48:23
}

//3. Маскирование личных данных
//Дана строка с номером кредитной карты, например "4539 1488 0343 6467".
// Замаскируйте все цифры, кроме последних четырех, символами "*".
fun disguise(arg: String) {
    val disguiseReplace = arg.replace("4539", "****").replace("1488", "****").replace("0343", "****")
    println(disguiseReplace)
}


//4. Форматирование адреса электронной почты.
//У вас есть электронный адрес, например "username@example.com".
// Преобразуйте его в строку "username [at] example [dot] com", используя функцию replace()
fun mail(arg: String) {
    val mailReplace = arg.replace("@", "[at]").replace(".", "[dot]")
    println(mailReplace)
}


//5. Извлечение имени файла из пути.
//Дан путь к файлу, например "C:/Пользователи/Документы/report.txt" или "D:/good.themes/dracula.theme"
// (может быть любым). Извлеките название файла с расширением.
fun nameOftheWay(arg: String) {
    val nameOfTheFile = arg.split("/").last()
    println(nameOfTheFile)
}


//6. Создание аббревиатуры из фразы.
//У вас есть фраза, например "Котлин лучший язык программирования" (может быть любой с разделителями слов - пробел).
// Создайте аббревиатуру из начальных букв слов (например, "ООП").
//Используйте split. Используйте for для перебора слов. Используйте var переменную для накопления первых букв.

fun abbreviatura(arg: String) {
    val words = arg.split(" ")
    var abbreviation = ""
    for (word in words) {
        if (word.isNotEmpty()) {                // проверка, чтобы слово не было пустым
            abbreviation += word[0].uppercase() // берём первую букву и добавляем в результат
        }
    }
    println(abbreviation)
}


//Задания повышенной сложности. Оформляются в отдельном файле. Не обязательные для выполнения. Проверка этих
// заданий не выполняется. За демонстрацию решения - стим с повышенными баллами.


//7. Все слова с большой буквы
//Напишите метод, который преобразует строку из нескольких слов в строку, где каждое слово начинается
// с заглавной буквы а все остальные - строчные. Используй перебор, анализ символов и замену букв на
// заглавную с помощью метода uppercase() для конкретной буквы.


//8. Игра в разведчика
//Напишите шифратор/дешифратор для строки. Шифровка производится путём замены двух соседних
// букв между собой: Kotlin шифруется в oKltni. Дешифровка выполняется аналогично.
//Если длина строки - нечётная, в конец добавляется символ пробела до начала шифрования.
// Таким образом все шифрованные сообщения будут с чётной длинной. Должно получиться два
// публичных метода: encrypt() и decrypt() которые принимают строку и печатают результат в консоль.


//9. Таблица умножения
//Напишите функцию, которая принимает два числа и выводит таблицу умножения, у которой в заголовках
// столбцов и строк находятся перемножаемые числа, а в перекрестии заголовка и столбца - результат
// перемножения. Важно: каждый столбец должен быть выровнен по правому краю с помощью шаблона с
// форматированием строк. Размер форматирования каждой строки нужно вычислять динамически для каждого
// столбца. Результат должен быть похож на этот пример:


